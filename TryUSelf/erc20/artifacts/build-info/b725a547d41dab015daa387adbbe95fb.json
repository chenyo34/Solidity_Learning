{
	"id": "b725a547d41dab015daa387adbbe95fb",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"TryUSelf/erc20/guidance.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n    // Create two files\n    // IERC20.sol defines the standard ERC20 interface.  \n    // ERC20.sol inherits and overrides IERC20, \n        // adding two new functions: mint() and burn().  \n        // Both require an integer parameter and adjust totalSupply when tokens are created or destroyed.  \n\n\n\n    //The following is the basic description for the IERC20, try it yourself.\n\n    //==========\n    //IERC20.sol\n    //==========\n    \n    /*************\n    Events \n    *************/\n\n    /**\n     * @dev Triggered when `value` tokens are transferred from `from` to `to`.\n     */\n\n\n    /**\n     * @dev Triggered whenever `value` tokens are approved by `owner` to be spent by `spender`.\n     */                \n\n\n    /*************\n    Functions\n    *************/\n\n    /**\n     * @dev Returns the total amount of tokens.\n     */\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n\n    /**\n     * @dev Transfers `amount` tokens from the caller's account to the recipient `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded or not.\n     *\n     * Emits a {Transfer} event.\n     */\n\n    /**\n     * @dev Allows `spender` to spend `amount` tokens from caller's account.\n     *\n     * Returns a boolean value indicating whether the operation succeeded or not.\n     *\n     * Emits an {Approval} event.\n     */\n\n    /**\n     * @dev Returns the amount authorized by the `owner` account to the `spender` account, default is 0.\n     *\n     * When {approve} or {transferFrom} is invokedï¼Œ`allowance` will be changed.\n     */\n\n    /**\n     * @dev Transfer `amount` of tokens from `from` account to `to` account, subject to the caller's\n     * allowance. The caller must have allowance for `from` account balance.\n     *\n     * Returns `true` if the operation is successful.\n     *\n     * Emits a {Transfer} event.\n     */\n\n    //==========\n    //ERC20.sol\n    //==========\n    \n    // This implementation primarily overrides the IREC20 interface, thus the structure has been generally determined.\n    // However, the ERC20 implementation remains flexible, leaving room for custom functionality.\n    // Consider adding enhancements to improve functionality, usability, and compatibility where appropriate.\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"sources": {
			"TryUSelf/erc20/guidance.sol": {
				"ast": {
					"absolutePath": "TryUSelf/erc20/guidance.sol",
					"exportedSymbols": {},
					"id": 2,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".21"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:0"
						}
					],
					"src": "32:2280:0"
				},
				"id": 0
			}
		}
	}
}